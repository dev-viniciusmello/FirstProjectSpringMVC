Controller é como se fosse uma servlet.

@Controller
	: Vai ser um controller de MVC, vai interceptar requisições de uma url.
	: Pra que o spring encontre(saiba) que é um controller. 
	: Lê e mapear os recursos que tem dentro dele.
	
@EntityScan(basePackages = "com.example.demo.model")
	: Spring boot lê e identifica entidades pra criar  as tabelas.
	
@ComponentScan(basePackages = {"com.*"})
	:Faz o spring mapear os pacotes.
	:Lendo as anotações e configurando em memória para nossa aplicação funcionar.
	
@Repository
	: Pra indicar pro Spring que se trata de uma interface que vai realizar operações com o banco de dados

@Transactional
	:Pro spring controlar toda a parte de transações.
	
@Autowired
	:Faz a injeção de dependência.
	
@EnableJpaRepositories(basePackages = {"com.example.demo.repository"})
	:Faz o spring identificar os nossos repositories.
	
@EnableTransactionManagement
	:Habilitar a parte de transações do Spring.
	
@Modifying
	:Serve para habilitar comandos DML.	

@PathVariable("idpessoa")
	:Pega uma variavel que foi passada pela url
	
@GetMapping("/editarpessoa/{idpessoa}")
	: Alternativa ao RequestMaping. Entre {} vem os parâmetros.
	
@Query("select p from Pessoa p where p.nome like %?1%")
	: Serve para fazer consultas JPQL.

@RequestParam("nomepesquisa") 
	: Serve para pegar parâmetros no corpo da requisição. Usa-se quando enviar dados através de post.
	: Percebe que o variavel for enviada pelo formulário e não uma url toda estranha.

Thymeleaf:
	Igual ao jsp, mas é um framework mais enxuto ainda.
	
th:each=" variavel : expression language"
	:Itera sobre uma determinada lista.
	:Pode ser usado se for um único objeto. Talvez, porque o método sempre retorna um Iterable.
	
th:text=" expression language{variavel.atributo}"
	:Apresenta na tela o valor do atributo de um objeto.

a th:href="@{/URI/{DefinicaoDaVariavel}(DefinicaoDaVariavel = ${objeto.atributo})}
	:Serve para passar alguma coisa através da URL de um objeto.
	:Estrutura que ajuda a gravar
		:@{//{}()}
		
th:action = "@{//{}()}"
	:Serve para montar a url passando um parâmetro no caminho da url.

th:object="${objeto}"
	:Carrega um objeto para o formulário
	
th:field="*{atributo}"
	:Carrega um campo para o id apontando * para um atributo.

ModelAndView
	:Vai ligar os dados que eu tenho no meu modelo(Banco de dados) com a minha view(tela).
	
new ModelAndView(nomeDaTelaDeRetorno)
	:Objeto criado com a sua respectiva view.
	
ModelandView.addObject(nomeDoAtributo, objeto)
	:Adiciona no atributo da expression language, que aparece na tela o objeto passado.
	
@NotNull(message = MENSAGEM)
	:Não aceita valores nulos
	:message
		:Define um mensagem de validação.

@Valid
	: Serve para informar que aquele objeto irá ser validado.

BindingResult binding
	:Um objeto que é muito útil para retornar as mensagens de validação
	:binding.getAllErrors()
		:Retorna uma lista do erros com muitas informações sobre nos atrbutos dos objetos.

ObjectError object 
	:object.getDefaultMessage()
		:Mensagens que definimos no message de uma validação.

* 
	: Asterisco antes do caminho é bom pra quando as urls estiverem bagunçadas.

WebConfigSecurity extends WebSecurityConfigurerAdapter
	:Adaptar as configurações ao nosso sistema. Urls, usuarios, especificar algum bloqueio.
	
@Configuration
	:Classe de configuração

@EnableWebSecurity
	:Sabe que essa é uma classe de configuração de segurança
	:Lê os métodos e implementa em memória.		
	
configure(HttpSecurity http) 
	:Configura as solicitações de acesso por HTTP
	
Método csrf().disable()
	: Desabilita as configurações padrão de memória do spring
authorizeRequests() 
	: Restringe os acessos.
antMatchers(HttpMethod.GET, "/").permitAll() 
	: Permite inicialmente acesso a todos com as requisições get com essa url '/'.
	
anyRequest().authenticated() 
	: Qualquer requisição tem de ser autenticada
	
and().formLogin().permitAll() 
	: Permite acesso ao formulário de login.

and().logout().logoutRequestMatcher(new AntPathRequestMatcher("/logout")) 
	:Mapeia url de logout e invalida usuário autenticado.
	
configure(AuthenticationManagerBuilder auth)
	:Configura autenticação do usuário com o banco de dados ou em memória

