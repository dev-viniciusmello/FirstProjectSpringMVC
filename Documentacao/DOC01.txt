Controller é como se fosse uma servlet.

@Controller
	: Vai ser um controller de MVC, vai interceptar requisições de uma url.
	: Pra que o spring encontre(saiba) que é um controller. 
	: Lê e mapear os recursos que tem dentro dele.
	
@EntityScan(basePackages = "com.example.demo.model")
	: Spring boot lê e identifica entidades pra criar  as tabelas.
	
@ComponentScan(basePackages = {"com.*"})
	:Faz o spring mapear os pacotes.
	:Lendo as anotações e configurando em memória para nossa aplicação funcionar.
	
@Repository
	: Pra indicar pro Spring que se trata de uma interface que vai realizar operações com o banco de dados

@Transactional
	:Pro spring controlar toda a parte de transações.
	
@Autowired
	:Faz a injeção de dependência.
	
@EnableJpaRepositories(basePackages = {"com.example.demo.repository"})
	:Faz o spring identificar os nossos repositories.
	
@EnableTransactionManagement
	:Habilitar a parte de transações do Spring.
	
@Modifying
	:Serve para habilitar comandos DML.	

@PathVariable("idpessoa")
	:Pega uma variavel que foi passada pela url
	
@GetMapping("/editarpessoa/{idpessoa}")
	: Alternativa ao RequestMaping. Entre {} vem os parâmetros.
	
@Query("select p from Pessoa p where p.nome like %?1%")
	: Serve para fazer consultas JPQL.

@RequestParam("nomepesquisa") 
	: Serve para pegar parâmetros no corpo da requisição. Usa-se quando enviar dados através de post.
	: Percebe que o variavel for enviada pelo formulário e não uma url toda estranha.

Thymeleaf:
	Igual ao jsp, mas é um framework mais enxuto ainda.
	
th:each=" variavel : expression language"
	:Itera sobre uma determinada lista.
	:Pode ser usado se for um único objeto. Talvez, porque o método sempre retorna um Iterable.
	
th:text=" expression language{variavel.atributo}"
	:Apresenta na tela o valor do atributo de um objeto.

a th:href="@{/URI/{DefinicaoDaVariavel}(DefinicaoDaVariavel = ${objeto.atributo})}
	:Serve para passar alguma coisa através da URL de um objeto.
	:Estrutura que ajuda a gravar
		:@{//{}()}
		
th:action = "@{//{}()}"
	:Serve para montar a url passando um parâmetro no caminho da url.

th:object="${objeto}"
	:Carrega um objeto para o formulário
	
th:field="*{atributo}"
	:Carrega um campo para o id apontando * para um atributo.

ModelAndView
	:Vai ligar os dados que eu tenho no meu modelo(Banco de dados) com a minha view(tela).
	
new ModelAndView(nomeDaTelaDeRetorno)
	:Objeto criado com a sua respectiva view.
	
ModelandView.addObject(nomeDoAtributo, objeto)
	:Adiciona no atributo da expression language, que aparece na tela o objeto passado.
	
@NotNull(message = MENSAGEM)
	:Não aceita valores nulos
	:message
		:Define um mensagem de validação.

@Valid
	: Serve para informar que aquele objeto irá ser validado.

BindingResult binding
	:Um objeto que é muito útil para retornar as mensagens de validação
	:binding.getAllErrors()
		:Retorna uma lista do erros com muitas informações sobre nos atrbutos dos objetos.

ObjectError object 
	:object.getDefaultMessage()
		:Mensagens que definimos no message de uma validação.

* 
	: Asterisco antes do caminho é bom pra quando as urls estiverem bagunçadas.

WebConfigSecurity extends WebSecurityConfigurerAdapter
	:Adaptar as configurações ao nosso sistema. Urls, usuarios, especificar algum bloqueio.
	
@Configuration
	:Classe de configuração

@EnableWebSecurity
	:Sabe que essa é uma classe de configuração de segurança
	:Lê os métodos e implementa em memória.		
	
configure(HttpSecurity http) 
	:Configura as solicitações de acesso por HTTP
	
Método csrf().disable()
	: Desabilita as configurações padrão de memória do spring
authorizeRequests() 
	: Restringe os acessos.
antMatchers(HttpMethod.GET, "/").permitAll() 
	: Permite inicialmente acesso a todos com as requisições get com essa url '/'.
	
anyRequest().authenticated() 
	: Qualquer requisição tem de ser autenticada
	
and().formLogin().permitAll() 
	: Permite acesso ao formulário de login.

and().logout().logoutRequestMatcher(new AntPathRequestMatcher("/logout")) 
	:Mapeia url de logout e invalida usuário autenticado.
	
configure(AuthenticationManagerBuilder auth)
	:Configura autenticação do usuário com o banco de dados ou em memória
	
UserDetails 
	:Interface que ajuda na validação com o Spring security

classe de serviço
	:Precisa dela para implementar outra interface ( UserDetailService) para podermos passar 
		como parâmetro dentro do WebConfigSecurity. 
			:Para fazer uso do uso do controle de autenticação do banco de dados no spring security.
		
		
		
GrantedAuthority
	:Usar os recursos do spring e facilitar a nossa implementação.
	:É um padrão onde sempre vai ter que ter ROLE_ALGUMACOISA nessa tabela do banco de dados.
	
ReportUtil
	:Classe geradora de relatórios pra gente.		
		
@Component
	:Pra classe ser gerenciada pelo spring
		
public byte[] gerarRelatorio(List listaDados, String relatorio, ServletContext sContext) 
	:Retorna nossa pdf em Byte para dowload no navegador	
	
JRBeanCollectionDataSource jrbcds = new JRBeanCollectionDataSource(listaDados)
	:Cria a nossa lista de dados para o relatório com nossa lista de objetos para imprimir.
	:Raciocinio. De alguma forma, eu tenho que pega essa lista que eu passei e tranforma em uma lista acessivel para o meu arquivo de relatório.

String caminhoJasper = servletContext.getRealPath("relatorios") + File.separator + relatorio + ".jasper";
	:Carrega o caminho do jasper compilado.

JasperPrint impressoraJasper = JasperFillManager.fillReport(caminhoJasper, new HashMap(), jrbcds);
	:Finalmente nessa parte, eu crio a impressora jasper com os dados passados. Pra isso preciso passar o caminho, coleção e também uma lista compatível.
	:Criei minha impressora e depois posso usá-la para imprimir em qualquer tipo de documento.

return JasperExportManager.exportReportToPdf(impressoraJasper);
	:Exporta para byte para fazer o dowload do pdf.
	
10 PASSOS PARA FAZER UM RELATÓRIO JASPER DE QUALIDADE
	
Queria explicar o processo de relatórios com o Jasper. Primeiro, nós temos que definir as estruturas de pasta onde ficarão os nossos projetos.
Nesse exemplo, eu criei src -> main -> webapp -> relatorios -> arquivos jasper (pessoa.jasper, pessoa.jrxml)

2 É necessário baixar a dependência jasper através do Maven do jasper 6.8.0.

3 Temos que instalar o jasper na nosssa maquina 6.8.0

4 Temos que abrir o jasper na nossa máquina

5 com ele aberto, deve-se criar um novo JasperReport project

6 Depois devemos adicionar nosso arquivo jar no build path

7 Devemo criar o nosso arquivo jasper report

8 devemos compilar e colocar os arquivos na estrutura de pastas criadas do projeto

9 devemos criar a classe responsável por converter um pdf

10 Devemos fazer uma classe que dê a resposta, como foi implementado no projeto, para o navegador baixar o pdf.
 
Como fazer um dowload de um arquivo

	:Métodos de dowload não redirecionam páginas, só as respostas configuradas para dowload. 
	:Por isso nosso método é void.
	:O método, quando for especificar uma resposta, não pode retornar uma tela.
	:resposta tem que ter um tamanho, tipo e cabeçalho. 
	:Tudo está bem definido no código.
			
		
		
		
		
		