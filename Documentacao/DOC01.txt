Controller é como se fosse uma servlet.

@Controller
	: Vai ser um controller de MVC, vai interceptar requisições de uma url.
	: Pra que o spring encontre(saiba) que é um controller. 
	: Lê e mapear os recursos que tem dentro dele.
	
@EntityScan(basePackages = "com.example.demo.model")
	: Spring boot lê e identifica entidades pra criar  as tabelas.
	
@ComponentScan(basePackages = {"com.*"})
	:Faz o spring mapear os pacotes.
	:Lendo as anotações e configurando em memória para nossa aplicação funcionar.
	
@Repository
	: Pra indicar pro Spring que se trata de uma interface que vai realizar operações com o banco de dados

@Transactional
	:Pro spring controlar toda a parte de transações.
	
@Autowired
	:Faz a injeção de dependência.
	
@EnableJpaRepositories(basePackages = {"com.example.demo.repository"})
	:Faz o spring identificar os nossos repositories.
	
@EnableTransactionManagement
	:Habilitar a parte de transações do Spring.
	
@PathVariable("idpessoa")
	:Pega uma variavel que foi passada pela url
	
@GetMapping("/editarpessoa/{idpessoa}")
	: Alternativa ao RequestMaping. Entre {} vem os parâmetros.

Thymeleaf:
	Igual ao jsp, mas é um framework mais enxuto ainda.
	
th:each=" variavel : expression language"
	:Itera sobre uma determinada lista.
	
th:text=" expression language{variavel.atributo}"
	:Apresenta na tela o valor do atributo de um objeto.

a th:href="@{/URI/{DefinicaoDaVariavel}(DefinicaoDaVariavel = ${objeto.atributo})}
	:Serve para passar alguma coisa através da URL de um objeto.

ModelAndView
	:Vai ligar os dados que eu tenho no meu modelo(Banco de dados) com a minha view(tela).
	
new ModelAndView(nomeDaTelaDeRetorno)
	:Objeto criado com a sua respectiva view.
	
ModelandView.addObject(nomeDoAtributo, objeto)
	:Adiciona no atributo da expression language, que aparece na tela o objeto passado.
	
	

